'''
SAMPLE LINEAR REGRESSION USING TITANIC DATA FROM KAGGLE:
Suvived is the Y variable being analyzed for this project.
'''
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
import time


'''
Python data science interview coding project for a Fortune50 company!
Step1: Clean and prepare your data: 
'''

start=time.time()
print("Logistic regression analyst starting!")

#Import the data set
titanic_data = pd.read_csv(r'C:\Users\Scott\Desktop\titanic_train.csv')

#Drop all rows with missing data:
titanic_data.dropna(inplace=True)
#print(titanic_data)

#These values have no numeric value:
titanic_data.drop(['Name', 'PassengerId', 'Ticket', 'Sex', 'Embarked', 'Cabin'], axis = 1, inplace = True)

'''
Step 2 - Build your models: 
For this exercise, you are required to build two models. The first model must be a logistic regression. 
The second model may be any supervised learning algorithm that is not from the GLM family.
'''

#Split the data set into x and y data
y_data = titanic_data['Survived']
#print(y_data)
x_data = titanic_data.drop('Survived', axis = 1)

#Split the data set into training data and test data
from sklearn.model_selection import train_test_split
x_train_data, x_test_data, y_train_data, y_test_data = train_test_split(x_data, y_data, test_size = 0.3, random_state=42)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(x_train_data, y_train_data)
print(model.coef_)
print(model.intercept_)

'''
Step 3 - Generate predictions:
Create predictions on the data in test.csv using each of your trained models. 
The predictions should be the class probabilities for belonging to the positive class (labeled '1').  
'''

pd.DataFrame(model.coef_, x_data.columns, columns = ['Coeff'])
predictions = model.predict(x_test_data)

# plt.scatter(y_test, predictions)
plt.hist(y_test_data - predictions)

from sklearn import metrics

metrics.mean_absolute_error(y_test_data, predictions)
metrics.mean_squared_error(y_test_data, predictions)
np.sqrt(metrics.mean_squared_error(y_test_data, predictions))


print("Linear regression program finished in: ",  round(time.time()-start, 3), " seconds.")

'''
Logistic regression analyst starting!
[-0.06588734 -0.00617106 -0.01566277 -0.08135495  0.0008213 ]
0.9675837240931995
Linear regression program finished in:  0.087  seconds.
'''

